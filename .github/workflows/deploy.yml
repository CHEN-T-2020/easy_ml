name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend deployment to Vercel
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build project
      env:
        REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}
      run: npm run build

    - name: Deploy to Vercel (Production)
      if: github.ref == 'refs/heads/main'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'

    - name: Deploy to Vercel (Preview)
      if: github.event_name == 'pull_request'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend

  # Backend tests and deployment
  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm' 
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: npm run build

    - name: Run tests (if available)
      run: npm test --if-present

    # Railway deployment happens automatically on push to main
    # Just need to trigger the webhook if configured
    - name: Trigger Railway Deployment
      if: github.ref == 'refs/heads/main'
      run: |
        if [ -n "${{ secrets.RAILWAY_WEBHOOK_URL }}" ]; then
          curl -X POST "${{ secrets.RAILWAY_WEBHOOK_URL }}"
        fi

  # Health check after deployment
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for deployment
      run: sleep 60

    - name: Check Backend Health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.BACKEND_URL }}/health || echo "000")
        if [ "$response" -eq 200 ]; then
          echo "‚úÖ Backend health check passed"
        else
          echo "‚ùå Backend health check failed with status: $response"
          exit 1
        fi

    - name: Check Frontend
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.FRONTEND_URL }} || echo "000")
        if [ "$response" -eq 200 ]; then
          echo "‚úÖ Frontend health check passed"  
        else
          echo "‚ùå Frontend health check failed with status: $response"
          exit 1
        fi

    - name: Notify on Success
      if: success()
      run: echo "üéâ Deployment successful! Frontend: ${{ secrets.FRONTEND_URL }}, Backend: ${{ secrets.BACKEND_URL }}"

    - name: Notify on Failure
      if: failure()
      run: echo "üí• Deployment failed! Check the logs above."